package pages

import (
"sudoku/web/layouts"
"sudoku/pkg/sudoku"
)

templ GamePage(data struct {
Grids *sudoku.SudokuPair
Fails int
PuzzleJSON string
SolutionJSON string
}) {
@layouts.MainLayout(layouts.LayoutProps{
Title: "Уютное Sudoku",
MetaDescription: "Играйте в Sudoku онлайн",
})

<div class="game-container">
    <div class="game-controls">
        <div class="difficulty">
            <button class="difficulty-btn active" data-difficulty="easy">Легко</button>
            <button class="difficulty-btn" data-difficulty="medium">Средне</button>
            <button class="difficulty-btn" data-difficulty="hard">Сложно</button>
        </div>
        <div class="action-buttons">
            <button class="action-btn restart" id="restart-btn">
                <i class="icon">↺</i> Новая игра
            </button>
        </div>
    </div>

    <div class="game-info">
        <div class="timer">
            <span class="timer-value" id="timer">00:00</span>
            <span class="timer-label">Время</span>
        </div>
        <div class="mistakes">
            <span class="mistakes-value" id="mistakes"> {data.Fails } </span>
            <span class="mistakes-label">Ошибки</span>
        </div>
    </div>

    <div class="game-message" id="message"></div>

    <div class="sudoku-grid" id="sudoku-grid">
        for i, row := range data.Grids.Puzzle.Grid {
        for j, cell := range row {
        if cell.Value != 0 {
        <div class="cell-untouchable" data-row={ i } data-col={ j } :class="{
                                        'fixed': @cell.Value != 0,
                                        'border-right-3': (j + 1) % 3 == 0 && j != 8,
                                        'border-bottom-3': (i + 1) % 3 == 0 && i != 8,
                                        'empty-cell': data.Grids.Empty.Grid[i][j].Value != 0
                                     }">
            { data.Grids.Puzzle.Grid[i][j].Value }
        </div>
        }
        if cell.Value == 0 {
        if data.Grids.Empty.Grid[i][j].Value == 0 {
        <div class="cell" data-row={ i } data-col={ j } :class="{
                                                                            'fixed': @cell.Value != 0,
                                                                            'border-right-3': (j + 1) % 3 == 0 && j != 8,
                                                                            'border-bottom-3': (i + 1) % 3 == 0 && i != 8,
                                                                            'empty-cell': data.Grids.Empty.Grid[i][j].Value != 0
                                                                         }"></div>
        }


        if data.Grids.Empty.Grid[i][j].Value != 0{
        <div class="cell error" data-row={ i } data-col={ j } :class="{
                                                                                            'fixed': @cell.Value != 0,
                                                                                            'border-right-3': (j + 1) % 3 == 0 && j != 8,
                                                                                            'border-bottom-3': (i + 1) % 3 == 0 && i != 8,
                                                                                            'empty-cell': data.Grids.Empty.Grid[i][j].Value != 0
                                                                                         }">
            { data.Grids.Empty.Grid[i][j].Value }
        </div>
        }

        }
        }
        }
    </div>



    <div class="number-pad">
        <button class="number-btn" data-value="1">1</button>
        <button class="number-btn" data-value="2">2</button>
        <button class="number-btn" data-value="3">3</button>
        <button class="number-btn" data-value="4">4</button>
        <button class="number-btn" data-value="5">5</button>
        <button class="number-btn" data-value="6">6</button>
        <button class="number-btn" data-value="7">7</button>
        <button class="number-btn" data-value="8">8</button>
        <button class="number-btn" data-value="9">9</button>
        <button class="number-btn clear" data-value="0">
            <i class="icon">⌫</i> Очистить
        </button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const game = {
            grid: JSON.parse('{{ data.PuzzleJSON }}'),
            solution: JSON.parse('{{ data.SolutionJSON }}'),
            difficulty: 'easy',
            selectedCell: null,
            mistakes: {{ data.Fails }},
            timer: 0,
            timerInterval: null,
            completed: false,

            init() {
                this.startTimer();
                this.setupEventListeners();
                this.renderGrid();
            },

            renderGrid() {
                const cells = document.querySelectorAll('.cell');
                cells.forEach(cell => {
                    if (!cell.classList.contains('fixed')) {
                        cell.addEventListener('click', () => this.selectCell(cell));
                    }
                });
            },

            startTimer() {
                clearInterval(this.timerInterval);
                this.timer = 0;
                this.updateTimer();

                this.timerInterval = setInterval(() => {
                    this.timer++;
                    this.updateTimer();
                }, 1000);
            },

            updateTimer() {
                const minutes = Math.floor(this.timer / 60);
                const seconds = this.timer % 60;
                document.getElementById('timer').textContent =
                    `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            },

            setupEventListeners() {
                document.querySelectorAll('.number-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        if (this.selectedCell) {
                            const value = parseInt(btn.dataset.value);
                            this.setCellValue(value);
                        }
                    });
                });

                document.getElementById('restart-btn').addEventListener('click', () => {
                    this.restartGame();
                });

                document.querySelectorAll('.difficulty-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        document.querySelectorAll('.difficulty-btn').forEach(b => {
                            b.classList.remove('active');
                        });
                        btn.classList.add('active');
                        this.difficulty = btn.dataset.difficulty;
                        this.restartGame();
                    });
                });

                document.addEventListener('keydown', (e) => {
                    if (this.selectedCell && e.key >= '1' && e.key <= '9') {
                        this.setCellValue(parseInt(e.key));
                    } else if (this.selectedCell && e.key === 'Backspace') {
                        this.setCellValue(0);
                    }
                });
            },

            selectCell(cell) {
                if (this.selectedCell) {
                    this.selectedCell.classList.remove('selected');
                }

                cell.classList.add('selected');
                this.selectedCell = cell;
            },

            setCellValue(value) {
                if (!this.selectedCell || this.completed) return;

                const row = parseInt(this.selectedCell.dataset.row);
                const col = parseInt(this.selectedCell.dataset.col);

                if (value === 0) {
                    this.selectedCell.textContent = '';
                    this.selectedCell.classList.remove('error');
                    this.grid[row][col].Value = 0;

                    fetch('/api/cell', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ row, col, value, isCorrect: true })
                    }).catch(err => console.error(err));

                    return;
                }

                const isCorrect = value === this.solution[row][col].Value;

                this.selectedCell.textContent = value;
                this.grid[row][col].Value = value;

                if (!isCorrect) {
                    this.selectedCell.classList.add('error');
                    this.mistakes++;
                    document.getElementById('mistakes').textContent = this.mistakes;
                } else {
                    this.selectedCell.classList.remove('error');
                }

                fetch('/api/cell', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ row, col, value, isCorrect })
                }).catch(err => console.error('Ошибка при обновлении ячейки на сервере:', err));

                this.checkCompletion();
            },



            checkCompletion() {
                for (let i = 0; i < 9; i++) {
                    for (let j = 0; j < 9; j++) {
                        if (this.grid[i][j].Value !== this.solution[i][j].Value) {
                            return;
                        }
                    }
                }

                this.completed = true;
                clearInterval(this.timerInterval);
                this.showMessage('Поздравляем! Вы решили головоломку!', 'success');
            },

            showMessage(text, type) {
                const messageEl = document.getElementById('message');
                messageEl.textContent = text;
                messageEl.className = `game-message ${type}`;

                setTimeout(() => {
                    messageEl.className = 'game-message';
                }, 3000);
            },

            restartGame() {
                fetch(`/game/api/new?difficulty=${this.difficulty}`, {
                    method: 'GET'
                })
                    .then(response => response.json())
                    .then(data => {
                        window.location.reload();
                    })
                    .catch(error => {
                        console.error('Error restarting game:', error);
                        this.showMessage('Ошибка при запуске новой игры', 'error');
                    });
            }
        };

        game.init();
    });
</script>

<style>
    .game-container {
        max-width: 600px;
        margin: 0 auto;
        background: white;
        border-radius: 16px;
        box-shadow: 0 8px 24px rgba(122, 106, 93, 0.12);
        padding: 24px;
    }

    .game-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        flex-wrap: wrap;
        gap: 12px;
    }

    .difficulty {
        display: flex;
        gap: 8px;
    }

    .difficulty-btn {
        padding: 8px 12px;
        background: #e8dfd5;
        border: none;
        border-radius: 8px;
        color: #5a4c3f;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .difficulty-btn.active {
        background: #a67c52;
        color: white;
    }

    .difficulty-btn:hover {
        background: #b8a99a;
        color: white;
    }

    .action-btn {
        padding: 10px 16px;
        background: #e8dfd5;
        border: none;
        border-radius: 8px;
        color: #5a4c3f;
        font-size: 14px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 6px;
        transition: all 0.2s;
    }

    .action-btn:hover {
        background: #b8a99a;
        color: white;
    }

    .action-btn.restart {
        background: #a67c52;
        color: white;
    }

    .action-btn.restart:hover {
        background: #7a6a5d;
    }

    .game-info {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        padding: 12px 16px;
        background: #e8dfd5;
        border-radius: 12px;
    }

    .timer,
    .mistakes {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .timer-value,
    .mistakes-value {
        font-size: 20px;
        font-weight: 600;
        color: #7a6a5d;
    }

    .timer-label,
    .mistakes-label {
        font-size: 14px;
        color: #8a7c6f;
    }

    .sudoku-grid {
        display: grid;
        grid-template-columns: repeat(9, 1fr);
        gap: 1px;
        background: #b8a99a;
        border: 2px solid #9c8a7c;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 24px;
    }

    .cell {
        aspect-ratio: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        font-size: 20px;
        font-weight: 500;
        cursor: pointer;
        position: relative;
        transition: background-color 0.2s;
    }

    .cell-untouchable {
        aspect-ratio: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        font-size: 20px;
        font-weight: 500;
        cursor: pointer;
        position: relative;
        transition: background-color 0.2s;
        cursor: not-allowed;
        pointer-events: none;
    }

    .cell-untouchable:hover {
        background: #f8f4f0;
    }

    .cell:hover {
        background: #f8f4f0;
    }

    .cell.fixed {
        font-weight: 600;
        color: #7a6a5d;
        background: #f8f4f0;
        cursor: default;
    }

    .cell.selected {
        background: #e8dfd5;
    }

    .border-right-3 {
        border-right: 2px solid #9c8a7c !important;
    }

    .border-bottom-3 {
        border-bottom: 2px solid #9c8a7c !important;
    }

    .number-pad {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 8px;
        margin-bottom: 20px;
    }

    .number-btn {
        aspect-ratio: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #e8dfd5;
        border: none;
        border-radius: 8px;
        font-size: 18px;
        font-weight: 500;
        color: #5a4c3f;
        cursor: pointer;
        transition: all 0.2s;
    }

    .number-btn:hover {
        background: #b8a99a;
        color: white;
    }

    .number-btn.clear {
        grid-column: span 2;
        aspect-ratio: unset;
        background: #a67c52;
        color: white;
    }

    .number-btn.clear:hover {
        background: #7a6a5d;
    }

    .game-message {
        text-align: center;
        padding: 12px;
        border-radius: 8px;
        margin-bottom: 16px;
        display: none;
        font-weight: 500;
    }

    .game-message.success {
        background: #a5c0a8;
        color: #2c4a2f;
        display: block;
    }

    .game-message.error {
        background: #d4a5a5;
        color: #6d3a3a;
        display: block;
    }

    .cell.error {
        color: #a7a7a7;
        font-weight: 500;
        opacity: 0.6;
        background-color: white;
    }

    .cell.empty-cell {
        color: #c0b4a0;
        font-weight: 500;
        opacity: 0.6;
        cursor: default;
    }



    @media (max-width: 500px) {
        .game-container {
            padding: 16px;
        }

        .game-controls {
            flex-direction: column;
            align-items: stretch;
        }

        .difficulty {
            justify-content: center;
        }

        .action-buttons {
            display: flex;
            justify-content: center;
            gap: 12px;
        }

        .cell {
            font-size: 18px;
        }
    }
</style>
}